{
  "address": "0x0731fBA1fd40C613893cF7c67d51bb2aCB6F197E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEG",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "alreadyClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getLeaf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "isClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x10d8f111f305c9d6a98ee9b47acc3e095ccf1aaf133432408eb8d0857e320364",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x0731fBA1fd40C613893cF7c67d51bb2aCB6F197E",
    "transactionIndex": 2,
    "gasUsed": "1405351",
    "logsBloom": "0x
    "blockHash": "0xeb636372fba23edef0f6b47c2eca12613a42730c2d7a9493f3c86ebd6cf7a855",
    "transactionHash": "0x10d8f111f305c9d6a98ee9b47acc3e095ccf1aaf133432408eb8d0857e320364",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 14667530,
        "transactionHash": "0x10d8f111f305c9d6a98ee9b47acc3e095ccf1aaf133432408eb8d0857e320364",
        "address": "0x0731fBA1fd40C613893cF7c67d51bb2aCB6F197E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xeb636372fba23edef0f6b47c2eca12613a42730c2d7a9493f3c86ebd6cf7a855"
      }
    ],
    "blockNumber": 14667530,
    "cumulativeGasUsed": "1526319",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf70b735ABAc85720514feF0D605b6D0C07da0829",
    2592000
  ],
  "numDeployments": 1,
  "solcInputHash": "f88383e0b8a16147851df08071d9a4a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEG\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,bytes32[])\":{\"notice\":\"Claim DEG reward with the proof\"},\"revoke()\":{\"notice\":\"Revoke the remaining DEG tokens\"},\"setMerkleRoot(bytes32)\":{\"notice\":\"Set merkle root by the owner\"}},\"notice\":\"Protocol Protection Testnet Reward Contract         User reward information is in the form:         [address: 0xabcd, amount: 1 ether]         All info is stored in a merkle tree and this contract verify the proof.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PPReward.sol\":\"PPReward\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/PPReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Protocol Protection Testnet Reward Contract\\r\\n *\\r\\n *         User reward information is in the form:\\r\\n *         [address: 0xabcd, amount: 1 ether]\\r\\n *\\r\\n *         All info is stored in a merkle tree and this contract verify the proof.\\r\\n */\\r\\ncontract PPReward is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Reward tokens\\r\\n    IERC20 public immutable DEG;\\r\\n\\r\\n    uint256 public immutable endTimestamp;\\r\\n\\r\\n    // Root of the merkle tree\\r\\n    bytes32 public root;\\r\\n\\r\\n    // User address => Already claimed the reward\\r\\n    // 0 as not claimed, 1 as claimed\\r\\n    mapping(address => uint256) public alreadyClaimed;\\r\\n\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n\\r\\n    constructor(address _deg, uint256 _duration) {\\r\\n        DEG = IERC20(_deg); // 0x9f285507Ea5B4F33822CA7aBb5EC8953ce37A645\\r\\n\\r\\n        endTimestamp = block.timestamp + _duration;\\r\\n    }\\r\\n\\r\\n    modifier notEnded() {\\r\\n        require(block.timestamp < endTimestamp, \\\"PPReward: ended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier revokable() {\\r\\n        require(block.timestamp > endTimestamp, \\\"PPReward: not ended yet\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Set merkle root by the owner\\r\\n    function setMerkleRoot(bytes32 _root) external onlyOwner {\\r\\n        root = _root;\\r\\n    }\\r\\n\\r\\n    function isClaimable(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        bytes32[] calldata _proof\\r\\n    ) external view returns (bool) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_to, _amount));\\r\\n\\r\\n        bool isValidate = MerkleProof.verify(_proof, root, leaf);\\r\\n        return isValidate;\\r\\n    }\\r\\n\\r\\n    function getLeaf(address _to, uint256 _amount)\\r\\n        external\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(_to, _amount));\\r\\n    }\\r\\n\\r\\n    /// @notice Claim DEG reward with the proof\\r\\n    function claim(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        bytes32[] calldata _proof\\r\\n    ) external notEnded {\\r\\n        require(alreadyClaimed[_to] == 0, \\\"Already Claimed\\\");\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_to, _amount));\\r\\n\\r\\n        bool isValidate = MerkleProof.verify(_proof, root, leaf);\\r\\n        require(isValidate, \\\"Not in the reward list\\\");\\r\\n\\r\\n        alreadyClaimed[_to] = 1;\\r\\n\\r\\n        DEG.safeTransfer(_to, _amount);\\r\\n\\r\\n        emit Claim(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Revoke the remaining DEG tokens\\r\\n    function revoke() external onlyOwner revokable {\\r\\n        DEG.safeTransfer(owner(), DEG.balanceOf(address(this)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d421f60cfc5d0ecad6d3baf51572766bf7f0546ff6f68f8fc581f4f4dd8c647\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b0838038062001b08833981810160405281019062000037919062000219565b620000576200004b620000a860201b60201c565b620000b060201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080426200009991906200028f565b60a081815250505050620002ca565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a68262000179565b9050919050565b620001b88162000199565b8114620001c457600080fd5b50565b600081519050620001d881620001ad565b92915050565b6000819050919050565b620001f381620001de565b8114620001ff57600080fd5b50565b6000815190506200021381620001e8565b92915050565b6000806040838503121562000233576200023262000174565b5b60006200024385828601620001c7565b9250506020620002568582860162000202565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200029c82620001de565b9150620002a983620001de565b9250828201905080821115620002c457620002c362000260565b5b92915050565b60805160a0516117f5620003136000396000818161022b015281816105360152610562015260008181610418015281816105cf01528181610669015261073e01526117f56000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b6549f7511610071578063b6549f7514610167578063be7bcba014610171578063e3b93b60146101a1578063ebf0c717146101bf578063f2fde38b146101dd578063f54b893b146101f9576100b4565b80633d13f874146100b9578063715018a6146100d55780637cb64759146100df5780638da5cb5b146100fb5780639641f52114610119578063a85adeab14610149575b600080fd5b6100d360048036038101906100ce9190610e00565b610229565b005b6100dd6104b2565b005b6100f960048036038101906100f49190610eaa565b6104c6565b005b6101036104d8565b6040516101109190610ee6565b60405180910390f35b610133600480360381019061012e9190610f01565b610501565b6040516101409190610f50565b60405180910390f35b610151610534565b60405161015e9190610f7a565b60405180910390f35b61016f610558565b005b61018b60048036038101906101869190610e00565b6106af565b6040516101989190610fb0565b60405180910390f35b6101a961073c565b6040516101b6919061102a565b60405180910390f35b6101c7610760565b6040516101d49190610f50565b60405180910390f35b6101f760048036038101906101f29190611045565b610766565b005b610213600480360381019061020e9190611045565b6107e9565b6040516102209190610f7a565b60405180910390f35b7f0000000000000000000000000000000000000000000000000000000000000000421061028b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282906110cf565b60405180910390fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461030d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103049061113b565b60405180910390fd5b600084846040516020016103229291906111c4565b604051602081830303815290604052805190602001209050600061038a848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060015484610801565b9050806103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c39061123c565b60405180910390fd5b6001600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061045c86867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108189092919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4866040516104a29190610f7a565b60405180910390a2505050505050565b6104ba61089e565b6104c4600061091c565b565b6104ce61089e565b8060018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600082826040516020016105169291906111c4565b60405160208183030381529060405280519060200120905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61056061089e565b7f000000000000000000000000000000000000000000000000000000000000000042116105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b9906112a8565b60405180910390fd5b6106ad6105cd6104d8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106269190610ee6565b602060405180830381865afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066791906112dd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108189092919063ffffffff16565b565b60008085856040516020016106c59291906111c4565b604051602081830303815290604052805190602001209050600061072d858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060015484610801565b90508092505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b61076e61089e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d49061137c565b60405180910390fd5b6107e68161091c565b50565b60026020528060005260406000206000915090505481565b60008261080e85846109e0565b1490509392505050565b6108998363a9059cbb60e01b848460405160240161083792919061139c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a36565b505050565b6108a6610afd565b73ffffffffffffffffffffffffffffffffffffffff166108c46104d8565b73ffffffffffffffffffffffffffffffffffffffff161461091a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091190611411565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008082905060005b8451811015610a2b57610a1682868381518110610a0957610a08611431565b5b6020026020010151610b05565b91508080610a239061148f565b9150506109e9565b508091505092915050565b6000610a98826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b309092919063ffffffff16565b9050600081511115610af85780806020019051810190610ab89190611503565b610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee906115a2565b60405180910390fd5b5b505050565b600033905090565b6000818310610b1d57610b188284610b48565b610b28565b610b278383610b48565b5b905092915050565b6060610b3f8484600085610b5f565b90509392505050565b600082600052816020526040600020905092915050565b606082471015610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90611634565b60405180910390fd5b610bad85610c73565b610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be3906116a0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c159190611731565b60006040518083038185875af1925050503d8060008114610c52576040519150601f19603f3d011682016040523d82523d6000602084013e610c57565b606091505b5091509150610c67828286610c96565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610ca657829050610cf6565b600083511115610cb95782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ced919061179d565b60405180910390fd5b9392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d3282610d07565b9050919050565b610d4281610d27565b8114610d4d57600080fd5b50565b600081359050610d5f81610d39565b92915050565b6000819050919050565b610d7881610d65565b8114610d8357600080fd5b50565b600081359050610d9581610d6f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610dc057610dbf610d9b565b5b8235905067ffffffffffffffff811115610ddd57610ddc610da0565b5b602083019150836020820283011115610df957610df8610da5565b5b9250929050565b60008060008060608587031215610e1a57610e19610cfd565b5b6000610e2887828801610d50565b9450506020610e3987828801610d86565b935050604085013567ffffffffffffffff811115610e5a57610e59610d02565b5b610e6687828801610daa565b925092505092959194509250565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b600060208284031215610ec057610ebf610cfd565b5b6000610ece84828501610e95565b91505092915050565b610ee081610d27565b82525050565b6000602082019050610efb6000830184610ed7565b92915050565b60008060408385031215610f1857610f17610cfd565b5b6000610f2685828601610d50565b9250506020610f3785828601610d86565b9150509250929050565b610f4a81610e74565b82525050565b6000602082019050610f656000830184610f41565b92915050565b610f7481610d65565b82525050565b6000602082019050610f8f6000830184610f6b565b92915050565b60008115159050919050565b610faa81610f95565b82525050565b6000602082019050610fc56000830184610fa1565b92915050565b6000819050919050565b6000610ff0610feb610fe684610d07565b610fcb565b610d07565b9050919050565b600061100282610fd5565b9050919050565b600061101482610ff7565b9050919050565b61102481611009565b82525050565b600060208201905061103f600083018461101b565b92915050565b60006020828403121561105b5761105a610cfd565b5b600061106984828501610d50565b91505092915050565b600082825260208201905092915050565b7f50505265776172643a20656e6465640000000000000000000000000000000000600082015250565b60006110b9600f83611072565b91506110c482611083565b602082019050919050565b600060208201905081810360008301526110e8816110ac565b9050919050565b7f416c726561647920436c61696d65640000000000000000000000000000000000600082015250565b6000611125600f83611072565b9150611130826110ef565b602082019050919050565b6000602082019050818103600083015261115481611118565b9050919050565b60008160601b9050919050565b60006111738261115b565b9050919050565b600061118582611168565b9050919050565b61119d61119882610d27565b61117a565b82525050565b6000819050919050565b6111be6111b982610d65565b6111a3565b82525050565b60006111d0828561118c565b6014820191506111e082846111ad565b6020820191508190509392505050565b7f4e6f7420696e2074686520726577617264206c69737400000000000000000000600082015250565b6000611226601683611072565b9150611231826111f0565b602082019050919050565b6000602082019050818103600083015261125581611219565b9050919050565b7f50505265776172643a206e6f7420656e64656420796574000000000000000000600082015250565b6000611292601783611072565b915061129d8261125c565b602082019050919050565b600060208201905081810360008301526112c181611285565b9050919050565b6000815190506112d781610d6f565b92915050565b6000602082840312156112f3576112f2610cfd565b5b6000611301848285016112c8565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611366602683611072565b91506113718261130a565b604082019050919050565b6000602082019050818103600083015261139581611359565b9050919050565b60006040820190506113b16000830185610ed7565b6113be6020830184610f6b565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006113fb602083611072565b9150611406826113c5565b602082019050919050565b6000602082019050818103600083015261142a816113ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149a82610d65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114cc576114cb611460565b5b600182019050919050565b6114e081610f95565b81146114eb57600080fd5b50565b6000815190506114fd816114d7565b92915050565b60006020828403121561151957611518610cfd565b5b6000611527848285016114ee565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061158c602a83611072565b915061159782611530565b604082019050919050565b600060208201905081810360008301526115bb8161157f565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061161e602683611072565b9150611629826115c2565b604082019050919050565b6000602082019050818103600083015261164d81611611565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061168a601d83611072565b915061169582611654565b602082019050919050565b600060208201905081810360008301526116b98161167d565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156116f45780820151818401526020810190506116d9565b60008484015250505050565b600061170b826116c0565b61171581856116cb565b93506117258185602086016116d6565b80840191505092915050565b600061173d8284611700565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061176f82611748565b6117798185611072565b93506117898185602086016116d6565b61179281611753565b840191505092915050565b600060208201905081810360008301526117b78184611764565b90509291505056fea2646970667358221220666acef5071efb8b00124a6ade1d7e984db3e8b05e9760759ba9179bd77cfd7764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b6549f7511610071578063b6549f7514610167578063be7bcba014610171578063e3b93b60146101a1578063ebf0c717146101bf578063f2fde38b146101dd578063f54b893b146101f9576100b4565b80633d13f874146100b9578063715018a6146100d55780637cb64759146100df5780638da5cb5b146100fb5780639641f52114610119578063a85adeab14610149575b600080fd5b6100d360048036038101906100ce9190610e00565b610229565b005b6100dd6104b2565b005b6100f960048036038101906100f49190610eaa565b6104c6565b005b6101036104d8565b6040516101109190610ee6565b60405180910390f35b610133600480360381019061012e9190610f01565b610501565b6040516101409190610f50565b60405180910390f35b610151610534565b60405161015e9190610f7a565b60405180910390f35b61016f610558565b005b61018b60048036038101906101869190610e00565b6106af565b6040516101989190610fb0565b60405180910390f35b6101a961073c565b6040516101b6919061102a565b60405180910390f35b6101c7610760565b6040516101d49190610f50565b60405180910390f35b6101f760048036038101906101f29190611045565b610766565b005b610213600480360381019061020e9190611045565b6107e9565b6040516102209190610f7a565b60405180910390f35b7f0000000000000000000000000000000000000000000000000000000000000000421061028b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282906110cf565b60405180910390fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461030d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103049061113b565b60405180910390fd5b600084846040516020016103229291906111c4565b604051602081830303815290604052805190602001209050600061038a848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060015484610801565b9050806103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c39061123c565b60405180910390fd5b6001600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061045c86867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108189092919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4866040516104a29190610f7a565b60405180910390a2505050505050565b6104ba61089e565b6104c4600061091c565b565b6104ce61089e565b8060018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600082826040516020016105169291906111c4565b60405160208183030381529060405280519060200120905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61056061089e565b7f000000000000000000000000000000000000000000000000000000000000000042116105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b9906112a8565b60405180910390fd5b6106ad6105cd6104d8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106269190610ee6565b602060405180830381865afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066791906112dd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108189092919063ffffffff16565b565b60008085856040516020016106c59291906111c4565b604051602081830303815290604052805190602001209050600061072d858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060015484610801565b90508092505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b61076e61089e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d49061137c565b60405180910390fd5b6107e68161091c565b50565b60026020528060005260406000206000915090505481565b60008261080e85846109e0565b1490509392505050565b6108998363a9059cbb60e01b848460405160240161083792919061139c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a36565b505050565b6108a6610afd565b73ffffffffffffffffffffffffffffffffffffffff166108c46104d8565b73ffffffffffffffffffffffffffffffffffffffff161461091a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091190611411565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008082905060005b8451811015610a2b57610a1682868381518110610a0957610a08611431565b5b6020026020010151610b05565b91508080610a239061148f565b9150506109e9565b508091505092915050565b6000610a98826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b309092919063ffffffff16565b9050600081511115610af85780806020019051810190610ab89190611503565b610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee906115a2565b60405180910390fd5b5b505050565b600033905090565b6000818310610b1d57610b188284610b48565b610b28565b610b278383610b48565b5b905092915050565b6060610b3f8484600085610b5f565b90509392505050565b600082600052816020526040600020905092915050565b606082471015610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90611634565b60405180910390fd5b610bad85610c73565b610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be3906116a0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c159190611731565b60006040518083038185875af1925050503d8060008114610c52576040519150601f19603f3d011682016040523d82523d6000602084013e610c57565b606091505b5091509150610c67828286610c96565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610ca657829050610cf6565b600083511115610cb95782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ced919061179d565b60405180910390fd5b9392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d3282610d07565b9050919050565b610d4281610d27565b8114610d4d57600080fd5b50565b600081359050610d5f81610d39565b92915050565b6000819050919050565b610d7881610d65565b8114610d8357600080fd5b50565b600081359050610d9581610d6f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610dc057610dbf610d9b565b5b8235905067ffffffffffffffff811115610ddd57610ddc610da0565b5b602083019150836020820283011115610df957610df8610da5565b5b9250929050565b60008060008060608587031215610e1a57610e19610cfd565b5b6000610e2887828801610d50565b9450506020610e3987828801610d86565b935050604085013567ffffffffffffffff811115610e5a57610e59610d02565b5b610e6687828801610daa565b925092505092959194509250565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b600060208284031215610ec057610ebf610cfd565b5b6000610ece84828501610e95565b91505092915050565b610ee081610d27565b82525050565b6000602082019050610efb6000830184610ed7565b92915050565b60008060408385031215610f1857610f17610cfd565b5b6000610f2685828601610d50565b9250506020610f3785828601610d86565b9150509250929050565b610f4a81610e74565b82525050565b6000602082019050610f656000830184610f41565b92915050565b610f7481610d65565b82525050565b6000602082019050610f8f6000830184610f6b565b92915050565b60008115159050919050565b610faa81610f95565b82525050565b6000602082019050610fc56000830184610fa1565b92915050565b6000819050919050565b6000610ff0610feb610fe684610d07565b610fcb565b610d07565b9050919050565b600061100282610fd5565b9050919050565b600061101482610ff7565b9050919050565b61102481611009565b82525050565b600060208201905061103f600083018461101b565b92915050565b60006020828403121561105b5761105a610cfd565b5b600061106984828501610d50565b91505092915050565b600082825260208201905092915050565b7f50505265776172643a20656e6465640000000000000000000000000000000000600082015250565b60006110b9600f83611072565b91506110c482611083565b602082019050919050565b600060208201905081810360008301526110e8816110ac565b9050919050565b7f416c726561647920436c61696d65640000000000000000000000000000000000600082015250565b6000611125600f83611072565b9150611130826110ef565b602082019050919050565b6000602082019050818103600083015261115481611118565b9050919050565b60008160601b9050919050565b60006111738261115b565b9050919050565b600061118582611168565b9050919050565b61119d61119882610d27565b61117a565b82525050565b6000819050919050565b6111be6111b982610d65565b6111a3565b82525050565b60006111d0828561118c565b6014820191506111e082846111ad565b6020820191508190509392505050565b7f4e6f7420696e2074686520726577617264206c69737400000000000000000000600082015250565b6000611226601683611072565b9150611231826111f0565b602082019050919050565b6000602082019050818103600083015261125581611219565b9050919050565b7f50505265776172643a206e6f7420656e64656420796574000000000000000000600082015250565b6000611292601783611072565b915061129d8261125c565b602082019050919050565b600060208201905081810360008301526112c181611285565b9050919050565b6000815190506112d781610d6f565b92915050565b6000602082840312156112f3576112f2610cfd565b5b6000611301848285016112c8565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611366602683611072565b91506113718261130a565b604082019050919050565b6000602082019050818103600083015261139581611359565b9050919050565b60006040820190506113b16000830185610ed7565b6113be6020830184610f6b565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006113fb602083611072565b9150611406826113c5565b602082019050919050565b6000602082019050818103600083015261142a816113ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149a82610d65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114cc576114cb611460565b5b600182019050919050565b6114e081610f95565b81146114eb57600080fd5b50565b6000815190506114fd816114d7565b92915050565b60006020828403121561151957611518610cfd565b5b6000611527848285016114ee565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061158c602a83611072565b915061159782611530565b604082019050919050565b600060208201905081810360008301526115bb8161157f565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061161e602683611072565b9150611629826115c2565b604082019050919050565b6000602082019050818103600083015261164d81611611565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061168a601d83611072565b915061169582611654565b602082019050919050565b600060208201905081810360008301526116b98161167d565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156116f45780820151818401526020810190506116d9565b60008484015250505050565b600061170b826116c0565b61171581856116cb565b93506117258185602086016116d6565b80840191505092915050565b600061173d8284611700565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061176f82611748565b6117798185611072565b93506117898185602086016116d6565b61179281611753565b840191505092915050565b600060208201905081810360008301526117b78184611764565b90509291505056fea2646970667358221220666acef5071efb8b00124a6ade1d7e984db3e8b05e9760759ba9179bd77cfd7764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,uint256,bytes32[])": {
        "notice": "Claim DEG reward with the proof"
      },
      "revoke()": {
        "notice": "Revoke the remaining DEG tokens"
      },
      "setMerkleRoot(bytes32)": {
        "notice": "Set merkle root by the owner"
      }
    },
    "notice": "Protocol Protection Testnet Reward Contract         User reward information is in the form:         [address: 0xabcd, amount: 1 ether]         All info is stored in a merkle tree and this contract verify the proof.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PPReward.sol:PPReward",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2104,
        "contract": "contracts/PPReward.sol:PPReward",
        "label": "root",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2108,
        "contract": "contracts/PPReward.sol:PPReward",
        "label": "alreadyClaimed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}